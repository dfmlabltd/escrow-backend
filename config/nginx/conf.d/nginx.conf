upstream gunicorn {
  #fail_timeout=10 #means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server backend:8000;
}

set $serverName api.iamoracle.dev

set $applicationDirectory /app/

set $logDirectory /etc/nginx/logs/

set $configurationDirectory /etc/nginx/conf.d/

server {
    listen              443 ssl http2;
    listen              [::]:443 ssl http2;
    server_name         $serverName;

    # SSL
    ssl_trusted_certificate $configurationDirectory/ssl/origin.crt;
    ssl_certificate     $configurationDirectory/ssl/certificate.crt;
    ssl_certificate_key $configurationDirectory/ssl/private.key;

    # security
    include            $configurationDirectory/security.conf;

    client_max_body_size 16M;

    location / {
        rewrite ^(.*) $1 break;
        proxy_pass http://gunicorn;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 1m;
        proxy_connect_timeout 1m;
        access_log $logDirectory/nginx-access.log;
        error_log  $logDirectory/nginx-error.log;
    }

    location /dashboard {
        rewrite ^(.*) $1 break;
        proxy_pass http://gunicorn;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 1m;
        proxy_connect_timeout 1m;
        access_log $logDirectory/nginx-access-dashboard.log;
        error_log  $logDirectory/nginx-error-dashboard.log;
    }

    location /staticfiles/ {
        alias $applicationDirectory/staticfiles/;
        access_log off;
        error_log $logDirectory/static-error.log;
    }

    error_page 404 /400.html;

    # additional config
    include /etc/nginx/nginxconfig.io/general.conf;
}

# HTTP redirect

server {
    listen      80;
    listen      [::]:80;
    server_name $serverName;
    return      301 https://$serverName$request_uri;
}